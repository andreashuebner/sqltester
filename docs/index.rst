sqltester - Documentation
************************
General idea
===================

The general idea of sqltester is to make it easy to generate test queries
for your tables in your database by expressing the test cases in a simplified, domain-specific
language.

Example:
Assume, you have a table **tbl_customers** with the following structure:
account_id INT
account_name STRING
invoice_amount INT

Then you could express test cases like this::

  no duplicates on account_id in tbl_customers;
  at least 100 in tbl_customers;
  sum of invoice_amount at least 1000 in tbl_customers;

sqltester will generate a SQL query for each of the test cases and additionally one final
aggregation query with a union of all test tables.

Each of the generated test tables will have a field **error_description** that is either an
empty string or a string describing the failed test.

For the final test, you will just need to check the final aggregation table for datasets with 
*where error_description != ""*.

If you don't get any results, then all test cases have passed, otherwise one or several
tests have failed and the error description(s) will show you which ones.

Additionally, you can customize sqltester to use different sql expressions for certain test
cases, to generate a custom query after each test case (e.g. to grant access to tables) etc.

Quickstart
===================

Installation
---------------- 

You can just install sqltester with pip install sqltester, but you can also just clone the Git Repo. 
For use in production, only the following files are required:

* sqltester_driver.py
* _config_parser.py
* config.cfg

Quick start example
----------------

Assume, you have a table **tbl_customers** with the following structure:

* account_id INT
* account_name STRING

You could now create a file with your test cases (e.g. test_cases.csv) with the
following content::

  no duplicates on account_id in tbl_customers;

  no duplicates on account_name in tbl_customers;

  account_name minimum length 5 in tbl_customers;

Assuming that you keep the default table prefix, this will generate 
a test query to create the following tables
(all tables will end with a nine digit random number, 
so the numbers here are only examples):

**tbl_test_no_duplicates_account_id_111111111**

**tbl_test_no_duplicates_account_name_222222222**

**tbl_test_minimum_length_account_name_333333333**

**tbl_test_summary_444444444**

Test cases always end with ";". The number suffixes are random numbers generated by the script.

After running the generated test query, you only need to check the summary table e.g. like this::

  select * from tbl_test_444444444 where error_description != "";
  
The final summary table will only contain failed test cases.

You can generate your test queries by calling sqltester.py like this::

  python sqltester.py --input=test_cases.csv --output=test_queries.sql
  
Alternatively, after installing with pip sqltester, 
you can use::

 from sqltester_driver import SqlTester
 sqlTester = SqlTester('test_cases.csv', 'test_queries.sql') #first parameter input path, second parameter output path
 sqlTester.create_test_queries() # will do the same as calling sqltester_driver.py directly with command line parameters

Language specification
===================

Testing for duplicates
----------------

You can test for duplicates for a field or a combination of fields (testing for duplicates means that duplicates are considered to be a failing test).

Syntax: no duplicates on field1, [field2, field3, ...] in table_name;

Examples::

  no duplicates on account_id in tbl_customers;
  no duplicates on account_id, invoice_id in tbl_customers;
  
Testing for minimum number of datasets in table
_______________________________________________

You can test that the number of datasets in a table is greater/equal to a certain threshold. Optionally, you can provide a condition to apply.

Syntax: at least {number_datasets} in {table_name} [where condition1, condition2];

Examples::

  at least 100 in tbl_customers; 
  at least 200 in tbl_customers where invoice_amount >= 100 and invoice_age <= 30;
  
Please note: The script will not perform syntax checks on the conditions, so the conditions
need to be valid SQL syntax.
  
Testing for minimum sum over a field
____________________________________

You can test that the sum of a field is greater/equal to a certain threshold. Optionally, you can provide a condition to apply.

Syntax: at least {number_datasets} in {table_name} [where condition1, condition2];

Examples::

   sum of invoice_amount at least 1000 in tbl_customers; 
   sum of invoice_amount at least 1000 in tbl_customers where invoice_amount >= 100 and invoice_age <= 30;
   
  
Please note: The script will not perform syntax checks on the conditions, so the conditions
need to be valid SQL syntax.





